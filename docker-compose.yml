# Docker Compose for local development and testing
# Quick start: docker-compose up -d

version: '3.8'

services:
  # FastAPI application
  api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: ssr-api
    ports:
      - "8000:8000"
      - "9090:9090"  # Prometheus metrics
    environment:
      # Server
      - ENV=development
      - DEBUG=true
      - LOG_LEVEL=DEBUG

      # LLM API Keys (set in .env file)
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - GOOGLE_API_KEY=${GOOGLE_API_KEY}

      # Database
      - DATABASE_URL=postgresql://ssr_user:ssr_password@postgres:5432/ssr_db

      # Redis for caching and task queue
      - REDIS_URL=redis://redis:6379/0
      - TASK_QUEUE_BACKEND=redis

      # Celery
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0

      # Security (development mode - no authentication)
      - API_KEYS=dev-key-12345
      - RATE_LIMIT_ENABLED=false

      # Features
      - ENABLE_DEMOGRAPHICS=true
      - ENABLE_MULTI_SET_AVERAGING=true
      - ENABLE_BIAS_DETECTION=true

      # CORS (allow all in development)
      - CORS_ORIGINS=*

    volumes:
      # Mount code for hot reload
      - ./src:/app/src
      - ./data:/app/data
      - ./config:/app/config
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - ssr-network
    restart: unless-stopped

  # PostgreSQL database
  postgres:
    image: postgres:15-alpine
    container_name: ssr-postgres
    environment:
      - POSTGRES_USER=ssr_user
      - POSTGRES_PASSWORD=ssr_password
      - POSTGRES_DB=ssr_db
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ssr_user -d ssr_db"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - ssr-network
    restart: unless-stopped

  # Redis for caching and task queue
  redis:
    image: redis:7-alpine
    container_name: ssr-redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - ssr-network
    restart: unless-stopped

  # Celery worker for background tasks
  celery-worker:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: ssr-celery-worker
    command: celery -A src.api.background_tasks worker --loglevel=info --concurrency=4
    environment:
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - GOOGLE_API_KEY=${GOOGLE_API_KEY}
      - DATABASE_URL=postgresql://ssr_user:ssr_password@postgres:5432/ssr_db
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    volumes:
      - ./src:/app/src
      - ./data:/app/data
      - ./config:/app/config
    depends_on:
      - postgres
      - redis
    networks:
      - ssr-network
    restart: unless-stopped

  # Flower - Celery monitoring (optional)
  flower:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: ssr-flower
    command: celery -A src.api.background_tasks flower --port=5555
    ports:
      - "5555:5555"
    environment:
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    depends_on:
      - redis
      - celery-worker
    networks:
      - ssr-network
    restart: unless-stopped

  # Prometheus for metrics collection (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: ssr-prometheus
    ports:
      - "9091:9090"
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    networks:
      - ssr-network
    restart: unless-stopped

  # Grafana for metrics visualization (optional)
  grafana:
    image: grafana/grafana:latest
    container_name: ssr-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana-data:/var/lib/grafana
    depends_on:
      - prometheus
    networks:
      - ssr-network
    restart: unless-stopped

networks:
  ssr-network:
    driver: bridge

volumes:
  postgres-data:
  redis-data:
  prometheus-data:
  grafana-data:
